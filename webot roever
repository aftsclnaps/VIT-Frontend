from controller import Robot

# Time step for simulation
TIME_STEP = 64

# Initialize the Thymio II Robot
robot = Robot()

# ✅ Get the Correct Motor Names
left_motor = robot.getDevice("motor.left")
right_motor = robot.getDevice("motor.right")

if left_motor is None or right_motor is None:
    print("Error: Motors not found! Check Webots Scene Tree.")
    exit()

# Enable motor velocity mode
left_motor.setPosition(float('inf'))
right_motor.setPosition(float('inf'))
left_motor.setVelocity(0.0)
right_motor.setVelocity(0.0)

# ✅ Enable Proximity Sensors (For Obstacle Avoidance & Survivor Detection)
proximity_sensors = []
sensor_names = [
    "prox.horizontal.0", "prox.horizontal.1", "prox.horizontal.2",
    "prox.horizontal.3", "prox.horizontal.4", "prox.horizontal.5", "prox.horizontal.6"
]
for name in sensor_names:
    sensor = robot.getDevice(name)
    sensor.enable(TIME_STEP)
    proximity_sensors.append(sensor)

# ✅ Enable Ground Sensors (For Cliff Detection)
ground_sensors = []
ground_sensor_names = ["prox.ground.0", "prox.ground.1"]
for name in ground_sensor_names:
    sensor = robot.getDevice(name)
    sensor.enable(TIME_STEP)
    ground_sensors.append(sensor)

# ✅ Enable Touch Sensors (Thymio Buttons)
button_names = ["button.left", "button.right", "button.forward", "button.backward", "button.center"]
buttons = {}
for name in button_names:
    button = robot.getDevice(name)
    button.enable(TIME_STEP)
    buttons[name] = button

# ✅ Enable Accelerometer (For Sudden Movement Detection)
accelerometer = robot.getDevice("acc")
accelerometer.enable(TIME_STEP)

# ✅ Enable LEDs
leds = robot.getDevice("leds.circle")

# ✅ Movement Functions
def move_forward():
    left_motor.setVelocity(3.0)
    right_motor.setVelocity(3.0)

def move_backward():
    left_motor.setVelocity(-3.0)
    right_motor.setVelocity(-3.0)

def turn_left():
    left_motor.setVelocity(-2.0)
    right_motor.setVelocity(2.0)

def turn_right():
    left_motor.setVelocity(2.0)
    right_motor.setVelocity(-2.0)

def stop():
    left_motor.setVelocity(0.0)
    right_motor.setVelocity(0.0)

# ✅ Function to Check for Obstacles
def obstacle_avoidance():
    front_values = [proximity_sensors[2].getValue(), proximity_sensors[3].getValue(), proximity_sensors[4].getValue()]
    
    if any(value > 200 for value in front_values):  # Obstacle detected
        stop()
        turn_left()
        return True
    return False

# ✅ Function to Detect Survivors (Simulated using Proximity Sensors)
def identify_survivors():
    if any(sensor.getValue() > 800 for sensor in proximity_sensors):  # Very close object
        print("Survivor Detected!")
        leds.set(0xFF0000)  # Red LED to indicate detection
        return True
    return False

# ✅ Function to Deliver Aid
def deliver_aid():
    stop()
    print("Delivering Aid...")
    leds.set(0x00FF00)  # Green LED for aid delivery
    robot.step(5000)  # Wait for 5 seconds
    move_backward()
    robot.step(2000)
    return

# ✅ Function to Check for Cliff
def check_cliff():
    ground_values = [ground_sensors[0].getValue(), ground_sensors[1].getValue()]
    
    if any(value < 200 for value in ground_values):  # Low value = detected edge
        print("Cliff Detected! Reversing...")
        leds.set(0xFFFF00)  # Yellow LED for cliff warning
        move_backward()
        robot.step(1000)
        turn_right()
        robot.step(1000)
        return True
    return False

# ✅ Function to Check for Sudden Movements
def check_acceleration():
    acc_values = accelerometer.getValues()
    
    if abs(acc_values[0]) > 5 or abs(acc_values[1]) > 5 or abs(acc_values[2]) > 5:
        print("Sudden movement detected! Stopping.")
        leds.set(0x0000FF)  # Blue LED for acceleration warning
        stop()
        return True
    return False

# ✅ Function to Check Button Inputs
def check_buttons():
    if buttons["button.center"].getValue() > 0:  # Center button pressed
        print("Stopping Robot!")
        stop()
        return True
    return False

# ✅ Main Control Loop
while robot.step(TIME_STEP) != -1:
    if check_buttons():  # Stop if button pressed
        break
    if check_acceleration():  # Detect sudden movement
        continue
    if check_cliff():  # Detect cliff
        continue
    if obstacle_avoidance():  # Avoid obstacle
        continue
    if identify_survivors():  # Detect survivor
        deliver_aid()
        continue
    
    move_forward() 
Reply
Forward

Add reaction
